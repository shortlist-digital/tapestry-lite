import React from 'react'
import { renderToString, renderToStaticMarkup } from 'react-dom/server'
import { ChunkExtractor } from '@loadable/server'
import Helmet from 'react-helmet'
import path from 'path'

export default async ({
  Component,
  routeOptions = {},
  match,
  componentData,
  queryParams,
  headers
}) => {
  const _tapestryData = {
    requestData: {
      ...match,
      queryParams,
      headers
    }
  }
  const data = Array.isArray(componentData)
    ? { data: componentData }
    : componentData

  // create html string from target component

  // This is the stats file generated by webpack loadable plugin
  const statsFile = path.resolve(
    process.cwd(),
    '.tapestry',
    'loadable-stats.json'
  )
  console.log({ statsFile })

  // We create an extractor from the statsFile
  const extractor = new ChunkExtractor({ statsFile })

  // Wrap your application using "collectChunks"
  const jsx = extractor.collectChunks(
    <Component {...data} _tapestry={_tapestryData} />
  )

  // Render your application
  const htmlString = renderToString(jsx)

  // getLoadableState must be called before renderToString to preload all import() components
  // const loadableState = await getLoadableState(app)
  // const htmlString = renderToString(app)

  // { html, css, ids }
  let styleData = {}
  // extract html, css and ids from either Glamor or Emotion
  if (process.env.CSS_PLUGIN === 'emotion') {
    styleData = require('emotion-server').extractCritical(htmlString)
  } else {
    styleData = require('glamor/server').renderStaticOptimized(() => htmlString)
  }
  const helmet = Helmet.renderStatic()
  // Assets to come, everything else works
  const renderData = {
    ...styleData,
    head: helmet,
    bootstrapData: data,
    _tapestryData,
    extractor
  }
  let Document =
    routeOptions.customDocument || require('./default-document').default

  const doctype = routeOptions.customDoctype || '<!doctype html>'

  return `${routeOptions.disableDoctype ? '' : doctype}${renderToStaticMarkup(
    <Document {...renderData} />
  )}`
}
